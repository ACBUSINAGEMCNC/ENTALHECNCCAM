#!/usr/bin/env python3
"""
Script de verifica√ß√£o do sistema de licenciamento
"""

import os
import sys
import json
from license_manager import LicenseManager

def check_file(filename, description):
    """Verifica se um arquivo existe"""
    exists = os.path.exists(filename)
    status = "‚úÖ" if exists else "‚ùå"
    print(f"{status} {description}: {filename}")
    return exists

def check_import(module_name):
    """Verifica se um m√≥dulo pode ser importado"""
    try:
        __import__(module_name)
        print(f"‚úÖ M√≥dulo {module_name} dispon√≠vel")
        return True
    except ImportError:
        print(f"‚ùå M√≥dulo {module_name} n√£o encontrado")
        return False

def main():
    print("=" * 60)
    print("VERIFICA√á√ÉO DO SISTEMA DE LICENCIAMENTO")
    print("ENTALHE CNC CAM")
    print("=" * 60)
    
    all_ok = True
    
    # 1. Verificar arquivos essenciais
    print("\n1. üìÅ ARQUIVOS ESSENCIAIS:")
    print("-" * 40)
    
    essential_files = [
        ("launcher.py", "Aplicativo principal"),
        ("license_manager.py", "Gerenciador de licen√ßas"),
        ("generate_license.py", "Gerador de chaves"),
        ("build_installer.py", "Script de build"),
        ("valid_keys.json", "Base de chaves v√°lidas"),
        ("requirements.txt", "Depend√™ncias Python"),
        ("INSTALADOR_README.md", "Documenta√ß√£o")
    ]
    
    for filename, description in essential_files:
        if not check_file(filename, description):
            all_ok = False
    
    # 2. Verificar depend√™ncias Python
    print("\n2. üêç DEPEND√äNCIAS PYTHON:")
    print("-" * 40)
    
    python_modules = [
        "tkinter",
        "hashlib",
        "json",
        "uuid",
        "datetime"
    ]
    
    for module in python_modules:
        if not check_import(module):
            all_ok = False
    
    # 3. Verificar funcionalidades do sistema
    print("\n3. ‚öôÔ∏è FUNCIONALIDADES:")
    print("-" * 40)
    
    try:
        lm = LicenseManager()
        
        # Teste de gera√ß√£o de chave
        test_key = lm.generate_license_key("Teste Sistema", 1)
        print(f"‚úÖ Gera√ß√£o de chaves: {test_key}")
        
        # Teste de valida√ß√£o
        is_valid, message = lm.validate_key(test_key)
        if is_valid:
            print(f"‚úÖ Valida√ß√£o de chaves: {message}")
        else:
            print(f"‚ùå Valida√ß√£o de chaves: {message}")
            all_ok = False
        
        # Teste de ID da m√°quina
        machine_id = lm.generate_machine_id()
        print(f"‚úÖ ID da m√°quina: {machine_id}")
        
        # Teste de hash
        key_hash = lm.hash_key(test_key)
        print(f"‚úÖ Hash de chaves: {key_hash[:16]}...")
        
    except Exception as e:
        print(f"‚ùå Erro nas funcionalidades: {e}")
        all_ok = False
    
    # 4. Verificar estrutura do projeto
    print("\n4. üèóÔ∏è ESTRUTURA DO PROJETO:")
    print("-" * 40)
    
    project_structure = [
        ("app", "Diret√≥rio do Next.js"),
        ("components", "Componentes React"),
        ("package.json", "Configura√ß√£o Node.js"),
        ("next.config.js", "Configura√ß√£o Next.js")
    ]
    
    for item, description in project_structure:
        check_file(item, description)
    
    # 5. Verificar chaves v√°lidas
    print("\n5. üîë CHAVES V√ÅLIDAS:")
    print("-" * 40)
    
    try:
        with open("valid_keys.json", 'r') as f:
            valid_keys = json.load(f)
        
        print(f"‚úÖ Total de chaves: {len(valid_keys)}")
        
        if valid_keys:
            print("üìã Chaves registradas:")
            for i, (key_hash, info) in enumerate(valid_keys.items(), 1):
                customer = info.get('customer', 'N/A')
                expires = info.get('expires', 'N/A')[:10]
                print(f"   {i}. {customer} (expira: {expires})")
        
    except Exception as e:
        print(f"‚ùå Erro ao ler chaves: {e}")
        all_ok = False
    
    # 6. Status da licen√ßa atual
    print("\n6. üìÑ STATUS DA LICEN√áA ATUAL:")
    print("-" * 40)
    
    try:
        lm = LicenseManager()
        is_licensed, message = lm.check_license()
        
        if is_licensed:
            print(f"‚úÖ {message}")
            
            if os.path.exists("license.json"):
                with open("license.json", 'r') as f:
                    license_data = json.load(f)
                
                print(f"   M√°quina: {license_data.get('machine_id', 'N/A')}")
                print(f"   Ativada: {license_data.get('activated_date', 'N/A')[:19]}")
        else:
            print(f"‚ÑπÔ∏è {message}")
    
    except Exception as e:
        print(f"‚ùå Erro ao verificar licen√ßa: {e}")
    
    # 7. Resultado final
    print("\n" + "=" * 60)
    if all_ok:
        print("üéâ SISTEMA COMPLETAMENTE FUNCIONAL!")
        print("‚úÖ Todos os componentes est√£o funcionando corretamente")
        print("\nPr√≥ximos passos:")
        print("1. Execute 'python build_installer.py' para criar o instalador")
        print("2. Use 'python generate_license.py' para gerar chaves")
        print("3. Distribua o pacote gerado junto com as chaves")
    else:
        print("‚ö†Ô∏è ALGUNS PROBLEMAS ENCONTRADOS")
        print("‚ùå Verifique os itens marcados com ‚ùå acima")
        print("üìñ Consulte o INSTALADOR_README.md para mais informa√ß√µes")
    
    print("=" * 60)
    
    return all_ok

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
